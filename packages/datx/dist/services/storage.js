"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var utils_1 = require("../helpers/model/utils");
var selectors_1 = require("../helpers/selectors");
var utils_2 = require("../helpers/utils");
var DataStorage = /** @class */ (function () {
    function DataStorage() {
        this.modelData = new WeakMap();
        this.modelClassData = new WeakMap();
        this.collections = mobx_1.observable.shallowArray([]);
    }
    DataStorage.prototype.initModel = function (model) {
        var modelData = { data: {}, meta: {} };
        mobx_1.extendObservable(modelData);
        this.modelData.set(model, modelData);
        return modelData;
    };
    DataStorage.prototype.getModelData = function (model) {
        return this.__getModelData(model).data;
    };
    DataStorage.prototype.getModelDataKey = function (model, key) {
        var modelData = this.__getModelData(model);
        return modelData.data[key];
    };
    DataStorage.prototype.setModelData = function (model, data) {
        var modelData = this.__getModelData(model);
        mobx_1.extendObservable(modelData.data, data);
    };
    DataStorage.prototype.setModelDataKey = function (model, key, value) {
        this.setModelData(model, (_a = {}, _a[key] = value, _a));
        var _a;
    };
    DataStorage.prototype.getModelMeta = function (model) {
        return this.modelData.get(model).meta;
    };
    DataStorage.prototype.getModelMetaKey = function (model, key) {
        return this.getModelMeta(model)[key];
    };
    DataStorage.prototype.setModelMeta = function (model, meta) {
        var modelData = this.__getModelData(model);
        mobx_1.extendObservable(modelData.meta, meta);
        return modelData.meta;
    };
    DataStorage.prototype.setModelMetaKey = function (model, key, value) {
        this.setModelMeta(model, (_a = {}, _a[key] = value, _a));
        var _a;
    };
    DataStorage.prototype.getAllModels = function () {
        var models = this.collections.map(function (collection) { return Array.from(collection.findAll()); });
        return utils_2.uniq(utils_2.flatten(models));
    };
    DataStorage.prototype.setModelClassMetaKey = function (model, key, value) {
        var data = this.modelClassData.get(model);
        Object.assign(data.meta, (_a = {}, _a[key] = value, _a));
        var _a;
    };
    DataStorage.prototype.getModelClassMetaKey = function (obj, key) {
        var _this = this;
        return selectors_1.reducePrototypeChain(obj, function (value, model) {
            return value || (_this.modelClassData.get(model) || { meta: {} }).meta[key] || null;
        }, null);
    };
    DataStorage.prototype.addModelDefaultField = function (model, key, value) {
        var data = this.modelClassData.get(model);
        if (data) {
            Object.assign(data.data, (_a = {}, _a[key] = value, _a));
        }
        else {
            this.modelClassData.set(model, {
                data: (_b = {}, _b[key] = value, _b),
                meta: {},
                references: {},
            });
        }
        var _a, _b;
    };
    DataStorage.prototype.getModelDefaults = function (obj) {
        var _this = this;
        var defaults = selectors_1.reducePrototypeChain(obj, function (state, model) {
            return state.concat((_this.modelClassData.get(model) || { data: [] }).data);
        }, []);
        return Object.assign.apply(Object, [{}].concat(defaults.reverse()));
    };
    DataStorage.prototype.registerCollection = function (collection) {
        this.collections.push(collection);
    };
    DataStorage.prototype.unregisterCollection = function (collection) {
        this.collections.remove(collection);
    };
    DataStorage.prototype.getModelCollections = function (model) {
        return this.collections.filter(function (item) { return item.hasItem(model); });
    };
    DataStorage.prototype.findModel = function (model, modelId) {
        if (modelId !== null && modelId !== undefined) {
            var type = utils_1.getModelType(model);
            var id = utils_1.getModelId(modelId);
            for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
                var collection = _a[_i];
                var item = collection.find(type, id);
                if (item) {
                    return item;
                }
            }
        }
        return null;
    };
    DataStorage.prototype.addModelClassReference = function (model, key, options) {
        var data = this.modelClassData.get(model);
        if (data) {
            Object.assign(data.references, (_a = {}, _a[key] = options, _a));
        }
        else {
            this.modelClassData.set(model, {
                data: {},
                meta: {},
                references: (_b = {}, _b[key] = options, _b),
            });
        }
        var _a, _b;
    };
    DataStorage.prototype.getModelClassReferences = function (obj) {
        var _this = this;
        var defaults = selectors_1.reducePrototypeChain(obj, function (state, model) {
            return state.concat((_this.modelClassData.get(model) || { references: {} }).references);
        }, []);
        return Object.assign.apply(Object, [{}].concat(defaults.reverse()));
    };
    DataStorage.prototype.getModelReferenceOptions = function (model, key) {
        var refs = this.getModelMetaKey(model, 'refs');
        return refs[key];
    };
    DataStorage.prototype.getModelsByType = function (type) {
        var models = this.collections.map(function (collection) { return Array.from(collection.findAll(type)); });
        return utils_2.uniq(utils_2.flatten(models));
    };
    DataStorage.prototype.__getModelData = function (model) {
        return this.modelData.get(model) || this.initModel(model);
    };
    // For testing purposes only
    DataStorage.prototype.clear = function () {
        this.modelData = new WeakMap();
        this.modelClassData = new WeakMap();
        this.collections.replace([]);
    };
    return DataStorage;
}());
exports.DataStorage = DataStorage;
exports.storage = new DataStorage();
//# sourceMappingURL=data:application/json;base64,