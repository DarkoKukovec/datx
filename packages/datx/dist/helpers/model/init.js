"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var consts_1 = require("../../consts");
var FieldType_1 = require("../../enums/FieldType");
var ReferenceType_1 = require("../../enums/ReferenceType");
var storage_1 = require("../../services/storage");
var fields_1 = require("./fields");
var utils_1 = require("./utils");
function initModelField(obj, key, defValue, type) {
    if (type === void 0) { type = FieldType_1.FieldType.DATA; }
    var fields = storage_1.storage.getModelMetaKey(obj, 'fields');
    // Initialize the observable field to the default value
    storage_1.storage.setModelDataKey(obj, key, defValue);
    fields.push(key);
    // Set up the computed prop
    mobx_1.extendObservable(obj, (_a = {},
        _a[key] = mobx_1.computed(function () { return fields_1.getField(obj, key); }, function (value) { return fields_1.updateField(obj, key, value, type); }),
        _a));
    var _a;
}
exports.initModelField = initModelField;
/**
 * Initialize a reference to other models
 *
 * @export
 * @template T
 * @param {T} obj Model to which the reference should be added
 * @param {string} key Model property where the reference will be defined
 * @param {IReferenceOptions} options Reference options
 * @param {TRefValue} initialVal Initial reference value
 */
function initModelRef(obj, key, options, initialVal) {
    var refs = storage_1.storage.getModelMetaKey(obj, 'refs');
    // Initialize the observable field to the given value
    refs[key] = options;
    var isArray = options.type === ReferenceType_1.ReferenceType.TO_MANY;
    storage_1.storage.setModelDataKey(obj, key, isArray ? [] : undefined);
    // Set up the computed prop
    mobx_1.extendObservable(obj, (_a = {},
        _a[key] = mobx_1.computed(function () { return fields_1.getRef(obj, key); }, function (value) { return fields_1.updateRef(obj, key, value); }),
        _a));
    if (!options.property) {
        obj[key] = initialVal;
    }
    var _a;
}
exports.initModelRef = initModelRef;
function prepareFields(data, meta, model) {
    var staticModel = model.constructor;
    var fields = meta.fields.slice();
    var classRefs = storage_1.storage.getModelClassReferences(staticModel);
    var refs = Object.assign({}, classRefs, meta.refs);
    var defaults = storage_1.storage.getModelDefaults(staticModel);
    Object.keys(data).concat(Object.keys(defaults))
        .forEach(function (key) {
        if (!(key in refs) && fields.indexOf(key) === -1) {
            fields.push(key);
        }
    });
    return { defaults: defaults, fields: fields, refs: refs };
}
function initModelData(model, data, meta, collection) {
    var _a = prepareFields(data, meta, model), defaults = _a.defaults, fields = _a.fields, refs = _a.refs;
    var staticModel = model.constructor;
    var modelId = storage_1.storage.getModelClassMetaKey(staticModel, 'id');
    var modelType = storage_1.storage.getModelClassMetaKey(staticModel, 'type');
    fields.forEach(function (key) {
        var type = FieldType_1.FieldType.DATA;
        var value = data[key] || defaults[key] || undefined;
        if (key === modelId) {
            type = FieldType_1.FieldType.ID;
            value = meta.id;
        }
        else if (key === modelType) {
            type = FieldType_1.FieldType.TYPE;
            value = meta.type;
        }
        initModelField(model, key, value, type);
    });
    Object.keys(refs).forEach(function (key) {
        var opts = refs[key];
        var value = data[key] || defaults[key] || undefined;
        var models = collection ? collection.add(value, utils_1.getModelType(opts.model)) : value;
        initModelRef(model, key, opts, models);
    });
}
function initModelMeta(model, data) {
    var staticModel = model.constructor;
    var modelId = storage_1.storage.getModelClassMetaKey(staticModel, 'id');
    var modelType = storage_1.storage.getModelClassMetaKey(staticModel, 'type');
    var meta = {
        fields: [],
        id: (modelId && data[modelId]) || staticModel.getAutoId(),
        refs: {},
        type: (modelType && data[modelType]) || utils_1.getModelType(model),
    };
    var newMeta;
    var toInit = { fields: [], refs: {} };
    if (consts_1.META_FIELD in data && data[consts_1.META_FIELD]) {
        var oldMeta = data[consts_1.META_FIELD];
        toInit.fields = oldMeta.fields;
        delete oldMeta.fields;
        toInit.refs = oldMeta.refs;
        delete oldMeta.refs;
        newMeta = storage_1.storage.setModelMeta(model, Object.assign(meta, oldMeta));
        delete data[consts_1.META_FIELD];
    }
    else {
        newMeta = storage_1.storage.setModelMeta(model, meta);
    }
    return Object.assign({}, newMeta, toInit);
}
function initModel(model, rawData, collection) {
    var staticModel = model.constructor;
    var data = Object.assign({}, staticModel.preprocess(rawData));
    var meta = initModelMeta(model, data);
    initModelData(model, data, meta, collection);
}
exports.initModel = initModel;
//# sourceMappingURL=data:application/json;base64,