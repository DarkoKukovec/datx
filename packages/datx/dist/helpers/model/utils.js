"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var consts_1 = require("../../consts");
var errors_1 = require("../../errors");
var Model_1 = require("../../Model");
var storage_1 = require("../../services/storage");
var format_1 = require("../format");
var init_1 = require("../model/init");
/**
 * Get the model type
 *
 * @export
 * @param {(IType|typeof Model|Model)} model Model to be checked
 * @returns {IType} Model type
 */
function getModelType(model) {
    if (typeof model === 'function') {
        return model.type;
    }
    else if (typeof model === 'object') {
        return storage_1.storage.getModelDataKey(model, 'type') || model.constructor.type;
    }
    return model;
}
exports.getModelType = getModelType;
/**
 * Get the model identifier
 *
 * @export
 * @param {(Model|IIdentifier)} model Model to be checked
 * @returns {IIdentifier} Model identifier
 */
function getModelId(model) {
    if (model instanceof Model_1.Model) {
        return storage_1.storage.getModelMetaKey(model, 'id');
    }
    return model;
}
exports.getModelId = getModelId;
/**
 * Get a list of collections the given model belongs to
 *
 * @export
 * @param {Model} model Model to be checked
 * @returns {Array<Collection>} A list of collections the given model belongs to
 */
function getModelCollections(model) {
    return storage_1.storage.getModelCollections(model);
}
exports.getModelCollections = getModelCollections;
/**
 * Clone the given model
 *
 * @export
 * @template T
 * @param {T} model Model to be clones
 * @returns {T} Cloned model object
 */
function cloneModel(model) {
    var TypeModel = model.constructor;
    var rawData = modelToJSON(model);
    var meta = rawData[consts_1.META_FIELD];
    meta.originalId = meta.id;
    delete meta.id;
    // TODO: Warning if model is not in a collection
    return new TypeModel(rawData);
}
exports.cloneModel = cloneModel;
/**
 * Get the original model for the cloned model
 *
 * @export
 * @param {Model} model Cloned model
 * @returns {Model} Original model
 */
function getOriginalModel(model) {
    var originalId = storage_1.storage.getModelMetaKey(model, 'originalId');
    if (originalId) {
        return storage_1.storage.findModel(model, originalId);
    }
    throw format_1.error(errors_1.NOT_A_CLONE);
}
exports.getOriginalModel = getOriginalModel;
/**
 * Bulk update the model data
 *
 * @export
 * @template T
 * @param {T} model Model to be updated
 * @param {IDictionary<any>} data Data that should be assigned to the model
 * @returns {T}
 */
function updateModel(model, data) {
    var modelId = storage_1.storage.getModelClassMetaKey(model.constructor, 'id');
    var modelType = storage_1.storage.getModelClassMetaKey(model.constructor, 'id');
    Object.keys(data).forEach(function (key) {
        if (key !== consts_1.META_FIELD && key !== modelId && key !== modelType) {
            assignModel(model, key, data[key]);
        }
    });
    return model;
}
exports.updateModel = updateModel;
/**
 * Assign a property to a model
 *
 * @export
 * @template T
 * @param {T} model A model to modify
 * @param {string} key Property name
 * @param {*} value Property value
 */
function assignModel(model, key, value) {
    var refs = storage_1.storage.getModelMetaKey(model, 'refs');
    if (key in refs) {
        assignModelRef(model, key, value);
    }
    else if (value instanceof Model_1.Model) {
        throw format_1.error(errors_1.NO_REFS, { key: key });
    }
    else {
        assignModelField(model, key, value);
    }
}
exports.assignModel = assignModel;
function assignModelField(model, key, value) {
    var fields = storage_1.storage.getModelMetaKey(model, 'fields');
    if (fields.indexOf(key) !== -1) {
        model[key] = value;
    }
    else {
        init_1.initModelField(model, key, value);
    }
}
function assignModelRef(model, key, value) {
    var refs = storage_1.storage.getModelMetaKey(model, 'refs');
    model[key] = value;
}
function getMetaKeyFromRaw(data, key) {
    if (consts_1.META_FIELD in data && typeof data[consts_1.META_FIELD] === 'object' && data[consts_1.META_FIELD] !== undefined) {
        return data[consts_1.META_FIELD][key];
    }
    return undefined;
}
exports.getMetaKeyFromRaw = getMetaKeyFromRaw;
/**
 * Get a serializable value of the model
 *
 * @export
 * @param {Model} model Model to serialize
 * @returns {IRawModel} Pure JS value of the model
 */
function modelToJSON(model) {
    var data = mobx_1.toJS(storage_1.storage.getModelData(model));
    var meta = mobx_1.toJS(storage_1.storage.getModelMeta(model));
    var raw = Object.assign(data, (_a = {}, _a[consts_1.META_FIELD] = meta, _a));
    var staticModel = model.constructor;
    var modelId = storage_1.storage.getModelClassMetaKey(staticModel, 'id');
    var modelType = storage_1.storage.getModelClassMetaKey(staticModel, 'type');
    if (meta && modelId) {
        raw[modelId] = meta.id;
    }
    if (meta && modelType) {
        raw[modelType] = meta.type;
    }
    return raw;
    var _a;
}
exports.modelToJSON = modelToJSON;
//# sourceMappingURL=data:application/json;base64,