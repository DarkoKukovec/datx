"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var FieldType_1 = require("../../enums/FieldType");
var ReferenceType_1 = require("../../enums/ReferenceType");
var errors_1 = require("../../errors");
var Model_1 = require("../../Model");
var storage_1 = require("../../services/storage");
var format_1 = require("../format");
var utils_1 = require("../utils");
var utils_2 = require("./utils");
function modelAddReference(model, key, newReference) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    var newRefId = utils_2.getModelId(newReference);
    var data = storage_1.storage.getModelDataKey(model, key);
    if (refOptions.type === ReferenceType_1.ReferenceType.TO_ONE) {
        storage_1.storage.setModelDataKey(model, key, newRefId);
    }
    else if (refOptions.type === ReferenceType_1.ReferenceType.TO_MANY || mobx_1.isObservableArray(data)) {
        data.push(newRefId);
    }
    else {
        storage_1.storage.setModelDataKey(model, key, newReference);
    }
}
function modelRemoveReference(model, key, oldReference) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    var oldRefId = utils_2.getModelId(oldReference);
    var data = storage_1.storage.getModelDataKey(model, key);
    if (refOptions.type === ReferenceType_1.ReferenceType.TO_ONE) {
        storage_1.storage.setModelDataKey(model, key, null);
    }
    else if (refOptions.type === ReferenceType_1.ReferenceType.TO_MANY || mobx_1.isObservableArray(data)) {
        data.remove(oldRefId);
    }
    else {
        storage_1.storage.setModelDataKey(model, key, null);
    }
}
function partialRefUpdate(model, key, change) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    var data = storage_1.storage.getModelDataKey(model, key);
    if (change.type === 'splice') {
        var added = change.added.map(utils_2.getModelId);
        data.splice.apply(data, [change.index, change.removedCount].concat(added));
        return null;
    }
    data[change.index] = utils_2.getModelId(change.newValue);
    return null;
}
function backRefSplice(model, key, change, refOptions) {
    var property = refOptions.property;
    change.added.map(function (item) { return modelAddReference(item, property, model); });
    var removed = model[key].slice(change.index, change.index + change.removedCount);
    removed.map(function (item) { return modelRemoveReference(item, property, model); });
    return null;
}
function backRefChange(model, key, change, refOptions) {
    var property = refOptions.property;
    var oldValue = model[key].length > change.index ? model[key][change.index] : null;
    if (change.newValue) {
        modelAddReference(change.newValue, property, model);
    }
    if (oldValue) {
        modelRemoveReference(oldValue, property, model);
    }
    return null;
}
function partialBackRefUpdate(model, key, change) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    if (change.type === 'splice') {
        return backRefSplice(model, key, change, refOptions);
    }
    return backRefChange(model, key, change, refOptions);
}
function getField(model, key) {
    return storage_1.storage.getModelDataKey(model, key);
}
exports.getField = getField;
function updateField(model, key, value, type) {
    if (type === FieldType_1.FieldType.TYPE) {
        throw format_1.error(errors_1.TYPE_READONLY);
    }
    else if (type === FieldType_1.FieldType.ID) {
        throw format_1.error(errors_1.ID_READONLY);
    }
    storage_1.storage.setModelDataKey(model, key, value);
}
exports.updateField = updateField;
function hasBackRef(item, property, target) {
    if (item[property] === null || item[property] === undefined) {
        return false;
    }
    else if (item[property] instanceof Model_1.Model) {
        return item[property] === target;
    }
    else {
        return item[property].indexOf(target) !== -1;
    }
}
function getBackRef(model, key, refOptions) {
    var type = utils_2.getModelType(refOptions.model);
    var allModels = storage_1.storage.getModelsByType(type);
    var backModels = Object.keys(allModels)
        .map(function (id) { return allModels[id]; })
        .filter(function (item) { return hasBackRef(item, refOptions.property, model); });
    var backData = mobx_1.observable.shallowArray(backModels);
    mobx_1.intercept(backData, function (change) { return partialBackRefUpdate(model, key, change); });
    return backData;
}
function getNormalRef(model, key, refOptions) {
    var value = storage_1.storage.getModelDataKey(model, key);
    var dataModels = utils_1.mapItems(value, function (id) { return storage_1.storage.findModel(refOptions.model, id); });
    if (dataModels instanceof Array) {
        var data = mobx_1.observable.shallowArray(dataModels);
        mobx_1.intercept(data, function (change) { return partialRefUpdate(model, key, change); });
        return data;
    }
    return dataModels;
}
function getRef(model, key) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    return (typeof refOptions.property === 'string')
        ? getBackRef(model, key, refOptions)
        : getNormalRef(model, key, refOptions);
}
exports.getRef = getRef;
function validateRef(refOptions, isArray, key) {
    if (refOptions.type === ReferenceType_1.ReferenceType.TO_ONE && isArray) {
        throw format_1.error(errors_1.REF_SINGLE, { key: key });
    }
    else if (refOptions.type === ReferenceType_1.ReferenceType.TO_MANY && !isArray) {
        throw format_1.error(errors_1.REF_ARRAY, { key: key });
    }
    else if (refOptions.property) {
        throw format_1.error(errors_1.BACK_REF_READ_ONLY);
    }
}
function updateRef(model, key, value) {
    var refOptions = storage_1.storage.getModelReferenceOptions(model, key);
    var ids = refOptions.type === ReferenceType_1.ReferenceType.TO_MANY
        ? (utils_1.mapItems(value, utils_2.getModelId) || [])
        : utils_1.mapItems(value, utils_2.getModelId);
    validateRef(refOptions, ids instanceof Array, key);
    var referencedModels = utils_1.mapItems(value, function (ref) { return storage_1.storage.findModel(refOptions.model, ref); });
    var isInvalidArray = utils_1.isFalsyArray(referencedModels) && value.length;
    var isInvalidModel = Boolean(value) && !referencedModels;
    if (isInvalidArray || isInvalidModel) {
        throw format_1.error(errors_1.REF_NEEDS_COLLECTION);
    }
    storage_1.storage.setModelDataKey(model, key, ids);
}
exports.updateRef = updateRef;
function getModelRefsByType(model, type) {
    var refs = storage_1.storage.getModelMetaKey(model, 'refs');
    return Object.keys(refs)
        .filter(function (key) { return !refs[key].property; })
        .filter(function (key) { return utils_2.getModelType(refs[key].model) === type; });
}
function updateModelReferences(newId, oldId, type) {
    var allModels = storage_1.storage.getAllModels().map(function (item) {
        getModelRefsByType(item, type).forEach(function (ref) {
            var data = storage_1.storage.getModelDataKey(item, ref);
            if (data instanceof Array || mobx_1.isObservableArray(data)) {
                var targetIndex = data.indexOf(oldId);
                if (targetIndex !== -1) {
                    data[targetIndex] = newId;
                }
            }
            else if (data === oldId) {
                storage_1.storage.setModelDataKey(item, ref, newId);
            }
        });
    });
}
/**
 * Updates the model identifier and all the existing references to the model
 *
 * @export
 * @param {Model} model Model to be updated
 * @param {IIdentifier} newId New model identifier
 */
function updateModelId(model, newId) {
    var collections = utils_2.getModelCollections(model);
    var oldId = utils_2.getModelId(model);
    var type = utils_2.getModelType(model);
    storage_1.storage.setModelMetaKey(model, 'id', newId);
    var staticModel = model.constructor;
    var modelId = storage_1.storage.getModelClassMetaKey(staticModel, 'id');
    if (modelId) {
        storage_1.storage.setModelDataKey(model, modelId, newId);
    }
    collections.forEach(function (collection) {
        // @ts-ignore - I'm bad and I should feel bad...
        collection.__changeModelId(oldId, newId, type);
    });
    updateModelReferences(newId, oldId, type);
}
exports.updateModelId = updateModelId;
//# sourceMappingURL=data:application/json;base64,