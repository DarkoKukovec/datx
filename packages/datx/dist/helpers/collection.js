"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../errors");
var Model_1 = require("../Model");
var storage_1 = require("../services/storage");
var format_1 = require("./format");
var utils_1 = require("./model/utils");
function initCollectionModel(collection, data) {
    var type = utils_1.getMetaKeyFromRaw(data, 'type');
    return upsertModel(data, type, collection);
}
function upsertModel(data, type, collection) {
    var staticCollection = collection.constructor;
    var TypeModel = staticCollection.types.find(function (item) { return item.type === type; });
    if (!type) {
        throw format_1.error(errors_1.UNDEFINED_TYPE);
    }
    if (!TypeModel) {
        throw format_1.error(errors_1.UNDEFINED_MODEL, { type: type });
    }
    var id = utils_1.getMetaKeyFromRaw(data, 'id');
    var existingModel = storage_1.storage.findModel(type, id);
    if (existingModel) {
        return utils_1.updateModel(existingModel, data);
    }
    return new TypeModel(data, collection);
}
exports.upsertModel = upsertModel;
function isSelectorFunction(fn) {
    return (typeof fn === 'function') && (fn !== Model_1.Model && !(fn.prototype instanceof Model_1.Model));
}
exports.isSelectorFunction = isSelectorFunction;
function initModels(collection, data) {
    return data.map(function (item) { return initCollectionModel(collection, item); });
}
exports.initModels = initModels;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBMEQ7QUFHMUQsa0NBQStCO0FBQy9CLCtDQUE0QztBQUM1QyxtQ0FBK0I7QUFDL0IsdUNBQTZEO0FBRTdELDZCQUE2QixVQUFzQixFQUFFLElBQWU7SUFDbEUsSUFBTSxJQUFJLEdBQUcseUJBQWlCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQscUJBQTRCLElBQWUsRUFBRSxJQUF3QixFQUFFLFVBQXNCO0lBQzNGLElBQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFdBQWdDLENBQUM7SUFDckUsSUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFsQixDQUFrQixDQUFDLENBQUM7SUFFNUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxjQUFLLENBQUMsdUJBQWMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDZixNQUFNLGNBQUssQ0FBQyx3QkFBZSxFQUFFLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUFNLEVBQUUsR0FBRyx5QkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekMsSUFBTSxhQUFhLEdBQUcsaUJBQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDbEIsTUFBTSxDQUFDLG1CQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFuQkQsa0NBbUJDO0FBRUQsNEJBQW1DLEVBQU87SUFDeEMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssYUFBSyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxZQUFZLGFBQUssQ0FBQyxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUZELGdEQUVDO0FBRUQsb0JBQTJCLFVBQXNCLEVBQUUsSUFBc0I7SUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRkQsZ0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbGxlY3Rpb259IGZyb20gJy4uL0NvbGxlY3Rpb24nO1xuaW1wb3J0IHtVTkRFRklORURfTU9ERUwsIFVOREVGSU5FRF9UWVBFfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtJUmF3TW9kZWx9IGZyb20gJy4uL2ludGVyZmFjZXMvSVJhd01vZGVsJztcbmltcG9ydCB7SVR5cGV9IGZyb20gJy4uL2ludGVyZmFjZXMvSVR5cGUnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vTW9kZWwnO1xuaW1wb3J0IHtzdG9yYWdlfSBmcm9tICcuLi9zZXJ2aWNlcy9zdG9yYWdlJztcbmltcG9ydCB7ZXJyb3J9IGZyb20gJy4vZm9ybWF0JztcbmltcG9ydCB7Z2V0TWV0YUtleUZyb21SYXcsIHVwZGF0ZU1vZGVsfSBmcm9tICcuL21vZGVsL3V0aWxzJztcblxuZnVuY3Rpb24gaW5pdENvbGxlY3Rpb25Nb2RlbChjb2xsZWN0aW9uOiBDb2xsZWN0aW9uLCBkYXRhOiBJUmF3TW9kZWwpOiBNb2RlbCB7XG4gIGNvbnN0IHR5cGUgPSBnZXRNZXRhS2V5RnJvbVJhdyhkYXRhLCAndHlwZScpO1xuICByZXR1cm4gdXBzZXJ0TW9kZWwoZGF0YSwgdHlwZSwgY29sbGVjdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cHNlcnRNb2RlbChkYXRhOiBJUmF3TW9kZWwsIHR5cGU6IElUeXBlfHR5cGVvZiBNb2RlbCwgY29sbGVjdGlvbjogQ29sbGVjdGlvbik6IE1vZGVsIHtcbiAgY29uc3Qgc3RhdGljQ29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uY29uc3RydWN0b3IgYXMgdHlwZW9mIENvbGxlY3Rpb247XG4gIGNvbnN0IFR5cGVNb2RlbCA9IHN0YXRpY0NvbGxlY3Rpb24udHlwZXMuZmluZCgoaXRlbSkgPT4gaXRlbS50eXBlID09PSB0eXBlKTtcblxuICBpZiAoIXR5cGUpIHtcbiAgICB0aHJvdyBlcnJvcihVTkRFRklORURfVFlQRSk7XG4gIH1cblxuICBpZiAoIVR5cGVNb2RlbCkge1xuICAgIHRocm93IGVycm9yKFVOREVGSU5FRF9NT0RFTCwge3R5cGV9KTtcbiAgfVxuXG4gIGNvbnN0IGlkID0gZ2V0TWV0YUtleUZyb21SYXcoZGF0YSwgJ2lkJyk7XG4gIGNvbnN0IGV4aXN0aW5nTW9kZWwgPSBzdG9yYWdlLmZpbmRNb2RlbCh0eXBlLCBpZCk7XG4gIGlmIChleGlzdGluZ01vZGVsKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1vZGVsKGV4aXN0aW5nTW9kZWwsIGRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUeXBlTW9kZWwoZGF0YSwgY29sbGVjdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdG9yRnVuY3Rpb24oZm46IGFueSkge1xuICByZXR1cm4gKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgJiYgKGZuICE9PSBNb2RlbCAmJiAhKGZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1vZGVsKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0TW9kZWxzKGNvbGxlY3Rpb246IENvbGxlY3Rpb24sIGRhdGE6IEFycmF5PElSYXdNb2RlbD4pIHtcbiAgcmV0dXJuIGRhdGEubWFwKChpdGVtKSA9PiBpbml0Q29sbGVjdGlvbk1vZGVsKGNvbGxlY3Rpb24sIGl0ZW0pKTtcbn1cbiJdfQ==