"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var consts_1 = require("../consts");
var errors_1 = require("../errors");
var storage_1 = require("../services/storage");
var format_1 = require("./format");
function setInitial(obj, key, defaultValue) {
    // Initialize the observable field to the default value
    storage_1.storage.setModelDataKey(obj, key, defaultValue);
    // Set up the computed prop
    mobx_1.extendObservable(obj, (_a = {},
        _a[key] = mobx_1.computed(function () { return storage_1.storage.getModelDataKey(obj, key); }, function (value) { return storage_1.storage.setModelDataKey(obj, key, value); }),
        _a));
    var _a;
}
exports.setInitial = setInitial;
function getModelType(model) {
    if (typeof model === 'function') {
        return model.type;
    }
    else if (typeof model === 'object') {
        return storage_1.storage.getModelDataKey(model, 'type') || model.constructor.type;
    }
    return model;
}
exports.getModelType = getModelType;
function getModelId(model) {
    return storage_1.storage.getModelMetaKey(model, 'id');
}
exports.getModelId = getModelId;
function getModelCollections(model) {
    return storage_1.storage.getModelCollections(model);
}
exports.getModelCollections = getModelCollections;
function cloneModel(model) {
    var TypeModel = model.constructor;
    var rawData = model.toJSON();
    if (rawData[consts_1.META_FIELD] && typeof rawData[consts_1.META_FIELD] === 'object' && rawData[consts_1.META_FIELD] !== undefined) {
        // @ts-ignore - TS is stupid...
        rawData[consts_1.META_FIELD].originalId = rawData[consts_1.META_FIELD].id;
        // @ts-ignore - TS is stupid...
        delete rawData[consts_1.META_FIELD].id;
    }
    return new TypeModel(rawData);
}
exports.cloneModel = cloneModel;
function getOriginalModel(model) {
    var originalId = storage_1.storage.getModelMetaKey(model, 'originalId');
    if (originalId) {
        return storage_1.storage.findModel(model, originalId);
    }
    throw format_1.error(errors_1.NOT_A_CLONE);
}
exports.getOriginalModel = getOriginalModel;
function updateModel(model, data) {
    Object.keys(data).forEach(function (key) {
        if (key !== consts_1.META_FIELD) {
            assignModelKey(model, key, data[key]);
        }
    });
    return model;
}
exports.updateModel = updateModel;
function assignModelKey(model, key, value) {
    if (key in model) {
        model[key] = value;
    }
    else {
        setInitial(model, key, value);
    }
}
exports.assignModelKey = assignModelKey;
function getMetaKeyFromRaw(data, key) {
    if (consts_1.META_FIELD in data && typeof data[consts_1.META_FIELD] === 'object' && data[consts_1.META_FIELD] !== undefined) {
        // @ts-ignore - TS is stupid...
        return data[consts_1.META_FIELD][key];
    }
    return undefined;
}
exports.getMetaKeyFromRaw = getMetaKeyFromRaw;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUFnRDtBQUdoRCxvQ0FBcUM7QUFDckMsb0NBQXNDO0FBTXRDLCtDQUE0QztBQUM1QyxtQ0FBK0I7QUFFL0Isb0JBQTRDLEdBQU0sRUFBRSxHQUFXLEVBQUUsWUFBaUI7SUFFaEYsdURBQXVEO0lBQ3ZELGlCQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFaEQsMkJBQTJCO0lBQzNCLHVCQUFnQixDQUFDLEdBQUc7UUFDbEIsR0FBQyxHQUFHLElBQUcsZUFBUSxDQUNiLGNBQU0sT0FBQSxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQWpDLENBQWlDLEVBQ3ZDLFVBQUMsS0FBSyxJQUFLLE9BQUEsaUJBQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBeEMsQ0FBd0MsQ0FDcEQ7WUFDRCxDQUFDOztBQUNMLENBQUM7QUFaRCxnQ0FZQztBQUVELHNCQUE2QixLQUErQjtJQUMxRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFLLEtBQUssQ0FBQyxXQUE0QixDQUFDLElBQUksQ0FBQztJQUM1RixDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNmLENBQUM7QUFQRCxvQ0FPQztBQUVELG9CQUEyQixLQUFZO0lBQ3JDLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUZELGdDQUVDO0FBRUQsNkJBQW9DLEtBQVk7SUFDOUMsTUFBTSxDQUFDLGlCQUFPLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUZELGtEQUVDO0FBRUQsb0JBQTRDLEtBQVE7SUFDbEQsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQTJCLENBQUM7SUFDcEQsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBVSxDQUFDLElBQUksT0FBTyxPQUFPLENBQUMsbUJBQVUsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsbUJBQVUsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDeEcsK0JBQStCO1FBQy9CLE9BQU8sQ0FBQyxtQkFBVSxDQUFDLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxtQkFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hELCtCQUErQjtRQUMvQixPQUFPLE9BQU8sQ0FBQyxtQkFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFNLENBQUM7QUFDckMsQ0FBQztBQVZELGdDQVVDO0FBRUQsMEJBQWlDLEtBQVk7SUFDM0MsSUFBTSxVQUFVLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsaUJBQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDRCxNQUFNLGNBQUssQ0FBQyxvQkFBVyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQU5ELDRDQU1DO0FBRUQscUJBQTZDLEtBQVEsRUFBRSxJQUFzQjtJQUMzRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7UUFDNUIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLG1CQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBUEQsa0NBT0M7QUFFRCx3QkFBZ0QsS0FBUSxFQUFFLEdBQVcsRUFBRSxLQUFVO0lBQy9FLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztBQUNILENBQUM7QUFORCx3Q0FNQztBQUVELDJCQUFrQyxJQUFlLEVBQUUsR0FBVztJQUM1RCxFQUFFLENBQUMsQ0FBQyxtQkFBVSxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxtQkFBVSxDQUFDLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxtQkFBVSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNqRywrQkFBK0I7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQU5ELDhDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb21wdXRlZCwgZXh0ZW5kT2JzZXJ2YWJsZX0gZnJvbSAnbW9ieCc7XG5cbmltcG9ydCB7Q29sbGVjdGlvbn0gZnJvbSAnLi4vQ29sbGVjdGlvbic7XG5pbXBvcnQge01FVEFfRklFTER9IGZyb20gJy4uL2NvbnN0cyc7XG5pbXBvcnQge05PVF9BX0NMT05FfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHtJRGljdGlvbmFyeX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9JRGljdGlvbmFyeSc7XG5pbXBvcnQge0lJZGVudGlmaWVyfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lJZGVudGlmaWVyJztcbmltcG9ydCB7SVJhd01vZGVsfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lSYXdNb2RlbCc7XG5pbXBvcnQge0lUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lUeXBlJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL01vZGVsJztcbmltcG9ydCB7c3RvcmFnZX0gZnJvbSAnLi4vc2VydmljZXMvc3RvcmFnZSc7XG5pbXBvcnQge2Vycm9yfSBmcm9tICcuL2Zvcm1hdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbml0aWFsPFQgZXh0ZW5kcyBNb2RlbD4ob2JqOiBULCBrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBhbnkpIHtcblxuICAvLyBJbml0aWFsaXplIHRoZSBvYnNlcnZhYmxlIGZpZWxkIHRvIHRoZSBkZWZhdWx0IHZhbHVlXG4gIHN0b3JhZ2Uuc2V0TW9kZWxEYXRhS2V5KG9iaiwga2V5LCBkZWZhdWx0VmFsdWUpO1xuXG4gIC8vIFNldCB1cCB0aGUgY29tcHV0ZWQgcHJvcFxuICBleHRlbmRPYnNlcnZhYmxlKG9iaiwge1xuICAgIFtrZXldOiBjb21wdXRlZChcbiAgICAgICgpID0+IHN0b3JhZ2UuZ2V0TW9kZWxEYXRhS2V5KG9iaiwga2V5KSxcbiAgICAgICh2YWx1ZSkgPT4gc3RvcmFnZS5zZXRNb2RlbERhdGFLZXkob2JqLCBrZXksIHZhbHVlKSxcbiAgICApLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGVsVHlwZShtb2RlbDogSVR5cGV8dHlwZW9mIE1vZGVsfE1vZGVsKTogSVR5cGUge1xuICBpZiAodHlwZW9mIG1vZGVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1vZGVsLnR5cGU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZGVsID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBzdG9yYWdlLmdldE1vZGVsRGF0YUtleShtb2RlbCwgJ3R5cGUnKSB8fCAobW9kZWwuY29uc3RydWN0b3IgYXMgdHlwZW9mIE1vZGVsKS50eXBlO1xuICB9XG4gIHJldHVybiBtb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGVsSWQobW9kZWw6IE1vZGVsKTogSUlkZW50aWZpZXIge1xuICByZXR1cm4gc3RvcmFnZS5nZXRNb2RlbE1ldGFLZXkobW9kZWwsICdpZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kZWxDb2xsZWN0aW9ucyhtb2RlbDogTW9kZWwpOiBBcnJheTxDb2xsZWN0aW9uPiB7XG4gIHJldHVybiBzdG9yYWdlLmdldE1vZGVsQ29sbGVjdGlvbnMobW9kZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVNb2RlbDxUIGV4dGVuZHMgTW9kZWw+KG1vZGVsOiBUKTogVCB7XG4gIGNvbnN0IFR5cGVNb2RlbCA9IG1vZGVsLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBNb2RlbDtcbiAgY29uc3QgcmF3RGF0YSA9IG1vZGVsLnRvSlNPTigpO1xuICBpZiAocmF3RGF0YVtNRVRBX0ZJRUxEXSAmJiB0eXBlb2YgcmF3RGF0YVtNRVRBX0ZJRUxEXSA9PT0gJ29iamVjdCcgJiYgcmF3RGF0YVtNRVRBX0ZJRUxEXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gQHRzLWlnbm9yZSAtIFRTIGlzIHN0dXBpZC4uLlxuICAgIHJhd0RhdGFbTUVUQV9GSUVMRF0ub3JpZ2luYWxJZCA9IHJhd0RhdGFbTUVUQV9GSUVMRF0uaWQ7XG4gICAgLy8gQHRzLWlnbm9yZSAtIFRTIGlzIHN0dXBpZC4uLlxuICAgIGRlbGV0ZSByYXdEYXRhW01FVEFfRklFTERdLmlkO1xuICB9XG4gIHJldHVybiBuZXcgVHlwZU1vZGVsKHJhd0RhdGEpIGFzIFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmlnaW5hbE1vZGVsKG1vZGVsOiBNb2RlbCkge1xuICBjb25zdCBvcmlnaW5hbElkID0gc3RvcmFnZS5nZXRNb2RlbE1ldGFLZXkobW9kZWwsICdvcmlnaW5hbElkJyk7XG4gIGlmIChvcmlnaW5hbElkKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2UuZmluZE1vZGVsKG1vZGVsLCBvcmlnaW5hbElkKTtcbiAgfVxuICB0aHJvdyBlcnJvcihOT1RfQV9DTE9ORSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNb2RlbDxUIGV4dGVuZHMgTW9kZWw+KG1vZGVsOiBULCBkYXRhOiBJRGljdGlvbmFyeTxhbnk+KTogVCB7XG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChrZXkgIT09IE1FVEFfRklFTEQpIHtcbiAgICAgIGFzc2lnbk1vZGVsS2V5KG1vZGVsLCBrZXksIGRhdGFba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1vZGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduTW9kZWxLZXk8VCBleHRlbmRzIE1vZGVsPihtb2RlbDogVCwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgaWYgKGtleSBpbiBtb2RlbCkge1xuICAgIG1vZGVsW2tleV0gPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBzZXRJbml0aWFsKG1vZGVsLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWV0YUtleUZyb21SYXcoZGF0YTogSVJhd01vZGVsLCBrZXk6IHN0cmluZyk6IGFueSB7XG4gIGlmIChNRVRBX0ZJRUxEIGluIGRhdGEgJiYgdHlwZW9mIGRhdGFbTUVUQV9GSUVMRF0gPT09ICdvYmplY3QnICYmIGRhdGFbTUVUQV9GSUVMRF0gIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEB0cy1pZ25vcmUgLSBUUyBpcyBzdHVwaWQuLi5cbiAgICByZXR1cm4gZGF0YVtNRVRBX0ZJRUxEXVtrZXldO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=