import { Collection } from '../Collection';
import { IDictionary } from '../interfaces/IDictionary';
import { IIdentifier } from '../interfaces/IIdentifier';
import { IRawModel } from '../interfaces/IRawModel';
import { IType } from '../interfaces/IType';
import { Model } from '../Model';
export declare function setInitial<T extends Model>(obj: T, key: string, defaultValue: any): void;
export declare function getModelType(model: IType | typeof Model | Model): IType;
export declare function getModelId(model: Model): IIdentifier;
export declare function getModelCollections(model: Model): Array<Collection>;
export declare function cloneModel<T extends Model>(model: T): T;
export declare function getOriginalModel(model: Model): Model | null;
export declare function updateModel<T extends Model>(model: T, data: IDictionary<any>): T;
export declare function assignModelKey<T extends Model>(model: T, key: string, value: any): void;
export declare function getMetaKeyFromRaw(data: IRawModel, key: string): any;
